@startuml

class User as "<<entity>>\nUser"{
 -name:String
 -email:String
 -maskedNRIC:String
 -jobTitle:String
 -phone_Number:String
 -starting_Date:String
 +getName():String
 +setName():Void
 +getEmail():String
 +setEmail():Void
 +getMaskedNRIC():String
+setMaskedNRIC():Void
 +getJobTitle():String
 +setJobTitle():Void
 +getPhone_Number():String
 +setPhone_Number():Void
 +getStarting_Date():String
 +setStarting_Date():Void
}

class Staff as "<<entity>>\nStaff"{
 -staffID:Integer
 +getStaffID():Integer
 +setStaffID():Void
 -qualification:ArrayList<String>
 +getQualification():ArrayList<String>
 +setQualification():Void
}

class Admin as "<<entity>>\nAdmin"{
 -adminID:Integer
 +getAdminID():Integer
 +setAdminID():Void
}

class Manager as "<<entity>>\nManager"{
 -managerID:Integer
 +getManagerID():Integer
 +setManagerID():Void
}

class Job as "<<entity>>\nJob" {
 -jobID:Integer
 -getDate:Date
 -getTime:Time
 +getJobID():Integer
 +setJobID():Void
 +getGetDate():Date
 +setGetDate():Void
 +getGetTime():Time
 +setGetTime():Void

}

class Van as "<<Entity>>\nVan"{
-vanStatus:String
-vanPlateNumber:Int
-isMaintenance:Bool
+getVanStatus():String
+getVanPlateNumber():Int
+getVanStatus():Bool
+setVanStatus():Void
+setVanPlateNumber():Void
+setIsMaintenance():Void
}

class JobAssignments as "<<entity>>\nJobAssignments"
{
   -AssignedStaff:ArrayList<User>
   -Preferences:ArrayList<User>
   +getSetAssignedStaff():ArrayList<User>
   +setAssignedStaff():Void
   +getPerferences():ArrayList<User>
   +setPerferences():Void
}
class Password as "<<Entity>>\nPassword"{
  -EncrpytedPassword:String
  +getEncrpyted_Password():String
  +setEncrpyted_Password():Void
}
class StaffAvailability as "<<Entity>>\nStaffRequest"{
  -StaffAvailability:ArrayList<Date>
  +getStaffAvailability():ArrayList<Date>
  +setStaffAvailability():Void
}

'Controller' class
class AdminController as "<<Control>>\nAdminController"{
 +editUser():Void
 +addUser():Void
 +deleteUser():Void
 +viewAllStaff():Void
}
class ManagerController as "<<Control>>\nManagerController"{
  +viewStaffAvailability():ArrayList<Date>
  +viewQualification():ArrayList<String>
  +AssignJob():Void
  +setRejectionRequest():Void
  +EditJobAssignment():Void
  +AddVan():Void
}
class StaffController as "<<Control>>\nStaffController"{
 +viewAvailability():void
 +requestRejection():void
 +editJobPreference():void
 +editAvailability():void
}
class PasswordController as "<<Control>>\nPasswordController"{
  +requestOTP():Void
  +authenticate():OTP
}


' Data Access Object
class AdminUserDataAcess as "<<Control>>\nAdminUserDataAcess"{
  +get(String UserID):User
  +getAll():ArrayList<User>
  +update(ArrayList<User>)
  
}
class ManagerUserDataAcess as "<<Control>>\nManagerUserDataAcess"{
  +get(String UserID):User
  +getAll():ArrayList<User>
  
}
class StaffUserDataAcess as "<<Control>>\nStaffUserDataAcess"{
  +get(String UserID):User
}
class JobDataAcess as "<<Control>>\nJobDataAcess"{
  +get(String JobID):Job
  +getAll():ArrayList<Job>
  +update(ArrayList<Job>)
  
}
class PasswordDataAcess as "<<Control>>\nPasswordDataAcess"{
  +update(Password String)
}
class InventoryDataAcess as "<<Control>>\nInventoryDataAcess"{
  +get(String VanID):Van
  +getAll():ArrayList<Van>
  +update(ArrayList<Van>)
  
}
class StaffAvailabilityDataAcess as "<<Control>>\nStaffAvailabilityDataAcess"{
  +get(String UserID):ArrayList<DateTime>
  +update(ArrayList<DateTime>)
  
}
' Inheritance
User <|-l- Staff
User <|-u- Manager
User <|- Admin

'Association


'Aggregation
JobAssignments o-- Staff : Show perference
Staff *-- StaffAvailability

' Composite
User *-- Password
Job *-- JobAssignments

' Dependency
Admin <. AdminController : uses
Manager <. ManagerController : uses
Staff <. StaffController : uses
Password <. PasswordController : uses

'Dependency DataAcess
Job <. JobDataAcess : uses
Manager <. StaffAvailabilityDataAcess : uses
Staff <. StaffAvailabilityDataAcess : uses
Manager <. ManagerUserDataAcess :Use
Staff <. StaffUserDataAcess : uses
Admin <. AdminUserDataAcess : uses
Manager <. InventoryDataAcess : uses
Password <.l. PasswordDataAcess : uses

@enduml